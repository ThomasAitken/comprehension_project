import math
import numpy as np
import statistics as stat
import random as rand
import spacy
nlp = spacy.load("en_core_web_lg")


category_tokens = [nlp(u"mammal"), nlp(u"reptile"), nlp(u"insect"), nlp(u"fish"), nlp(u"business"), nlp(u"building"), nlp(u"infrastructure"), nlp(u"event"), nlp(u"date"), nlp(u"activity"), nlp(u"game"), nlp(u"sport"), nlp(u"country"), nlp(u"city"), nlp(u"state"), nlp(u"language"), nlp(u"location"), nlp(u"person"), nlp(u"plant"), nlp(u"tree"), nlp(u"product"), nlp(u"food"), nlp(u"tool"), nlp(u"toy"), nlp(u"work of art"), nlp(u"object"), nlp(u"rock"), nlp(u"mineral"), nlp(u"appliance"), nlp(u"app"), nlp(u"emotion"), nlp(u"happiness"), nlp(u"sadness"), nlp(u"anger"), nlp(u"surprise"), nlp(u"container")]

vector_dt = np.dtype([('concept', np.unicode_, 32), ('similarities', np.float64, (36,)), ('variance', np.float64)])

def generate_vector(cat_token, tokens):
    similarities = []
    for tkn in tokens:
        similarities.append(cat_token.similarity(tkn))
    vector = (str(cat_token), similarities, np.var(similarities))
    return vector


vectors = []
for cat_token in category_tokens:
    vectors.append(generate_vector(cat_token, category_tokens))
matrix= np.array(vectors, dtype=vector_dt)
# print(matrix)
# [('mammal', [ 1.        ,  0.60710036,  0.49664178,  0.41607596,  0.04581414,  0.06263642,  0.0739158 ,  0.06351318,  0.06579884,  0.26502477,  0.09492803,  0.15588309,  0.1681181 ,  0.04818674,  0.13638333,  0.10777711,  0.09703732,  0.23194845,  0.28273639,  0.28667466,  0.08921853,  0.2262792 ,  0.07099413,  0.16915889,  0.16257724,  0.1537702 ,  0.17579484,  0.22150958,  0.06981588,  0.00186202,  0.10381456,  0.09603129,  0.09557261,  0.02206646,  0.08534717,  0.13992683], 0.03543878)
#  ('reptile', [ 0.60710036,  1.        ,  0.4715228 ,  0.43459758,  0.07998402,  0.11335962, -0.01620425,  0.0837541 ,  0.0338531 ,  0.11861232,  0.08705616,  0.16858868,  0.10723   ,  0.09557677,  0.12480404,  0.08371766,  0.06075613,  0.14328078,  0.26942568,  0.23597087,  0.07699759,  0.24007144,  0.03493869,  0.26359565,  0.13847924,  0.09860177,  0.21714398,  0.23228399,  0.08437644,  0.00756133,  0.06862945,  0.05210143,  0.04684052,  0.07456657,  0.10579536,  0.12544516], 0.03636603)
#  ('insect', [ 0.49664178,  0.4715228 ,  1.        ,  0.42725279,  0.10100605,  0.16350924,  0.08948028,  0.05486135,  0.04722958,  0.32149247,  0.10807427,  0.141059  ,  0.13639474,  0.09852726,  0.14004866,  0.08445428,  0.08962467,  0.17800878,  0.44998319,  0.44323258,  0.24385653,  0.33514594,  0.15691336,  0.24275783,  0.2260719 ,  0.17046296,  0.15263559,  0.26806161,  0.15496774,  0.02941374,  0.14003494,  0.14137449,  0.1202911 ,  0.09538456,  0.17564371,  0.21091696], 0.03300054)
#  ('fish', [ 0.41607596,  0.43459758,  0.42725279,  1.        ,  0.17783834,  0.19752407,  0.05892237,  0.13068564,  0.14845635,  0.24806795,  0.24568793,  0.28398298,  0.23078125,  0.22958866,  0.20582999,  0.13010724,  0.20104607,  0.27361346,  0.36604851,  0.32619582,  0.20308857,  0.57734561,  0.13556556,  0.268236  ,  0.31462333,  0.15221294,  0.27545964,  0.28463432,  0.10980863,  0.1461829 ,  0.14362782,  0.21315416,  0.12288729,  0.12919459,  0.26711267,  0.28326025], 0.02708781)
#  ('business', [ 0.04581414,  0.07998402,  0.10100605,  0.17783834,  1.        ,  0.47976098,  0.47240201,  0.33998929,  0.25604716,  0.35287331,  0.23639102,  0.30557918,  0.41106623,  0.38502029,  0.32220126,  0.25553986,  0.36732264,  0.38661253,  0.28156987,  0.18859366,  0.47809132,  0.34878849,  0.36505902,  0.20276631,  0.47448032,  0.17038085,  0.13452218,  0.17512631,  0.27856985,  0.22520417,  0.17903196,  0.25908636,  0.08050014,  0.19170234,  0.26928744,  0.16830189], 0.02810804)
#  ('building', [ 0.06263642,  0.11335962,  0.16350924,  0.19752407,  0.47976098,  1.        ,  0.52870823,  0.26281926,  0.16392131,  0.33481153,  0.23051642,  0.20817021,  0.33572717,  0.48678546,  0.33242021,  0.2557834 ,  0.41195546,  0.29460031,  0.38398566,  0.37536068,  0.26985186,  0.31562663,  0.29621256,  0.25634518,  0.53175223,  0.28534258,  0.25522969,  0.2159843 ,  0.25055966,  0.19060667,  0.17390889,  0.21070393,  0.09806334,  0.18657569,  0.20576675,  0.26580438], 0.02669469)
#  ('infrastructure', [ 0.0739158 , -0.01620425,  0.08948028,  0.05892237,  0.47240201,  0.52870823,  1.        ,  0.21335946,  0.09450642,  0.29123038,  0.08562198,  0.13814928,  0.40717107,  0.36808048,  0.36655784,  0.23083067,  0.29811142,  0.14118186,  0.31722747,  0.2080684 ,  0.31626053,  0.23997914,  0.29884514,  0.0349083 ,  0.31263976,  0.20249776,  0.10454205,  0.20964966,  0.31384733,  0.2272651 ,  0.07145771,  0.11713049,  0.03803672,  0.11069276,  0.11050762,  0.21145106], 0.03336012)
#  ('event', [ 0.06351318,  0.0837541 ,  0.05486135,  0.13068564,  0.33998929,  0.26281926,  0.21335946,  1.        ,  0.40738869,  0.37147682,  0.29270301,  0.31609576,  0.31182924,  0.29409515,  0.33127811,  0.15440181,  0.41436875,  0.36508948,  0.16038936,  0.20375278,  0.28106676,  0.29927303,  0.19713803,  0.11983674,  0.37357456,  0.30781708,  0.17943103,  0.07575064,  0.14501677,  0.25470525,  0.18886132,  0.16036117,  0.14820167,  0.12830996,  0.42769327,  0.15533681], 0.02691206)
#  ('date', [ 0.06579884,  0.0338531 ,  0.04722958,  0.14845635,  0.25604716,  0.16392131,  0.09450642,  0.40738869,  1.        ,  0.23573386,  0.20920125,  0.14673768,  0.2737576 ,  0.25734268,  0.23162039,  0.22867295,  0.37595453,  0.3454324 ,  0.19434197,  0.19525389,  0.28087096,  0.18221698,  0.1639004 ,  0.14002047,  0.2994704 ,  0.25674338,  0.19715756,  0.15239831,  0.12654706,  0.2392845 ,  0.08022864,  0.12660551,  0.07240341,  0.05818742,  0.33380753,  0.18923564], 0.02597185)
#  ('activity', [ 0.26502477,  0.11861232,  0.32149247,  0.24806795,  0.35287331,  0.33481153,  0.29123038,  0.37147682,  0.23573386,  1.        ,  0.24323325,  0.30912588,  0.26707402,  0.22028889,  0.33618303,  0.26390004,  0.3008587 ,  0.36182281,  0.28344159,  0.23782609,  0.32320194,  0.32612715,  0.32638737,  0.20575057,  0.41097462,  0.31364407,  0.14407145,  0.27133966,  0.16948397,  0.19930003,  0.27685699,  0.2794628 ,  0.16385546,  0.27388357,  0.22596061,  0.16603795], 0.01882023)
#  ('game', [ 0.09492803,  0.08705616,  0.10807427,  0.24568793,  0.23639102,  0.23051642,  0.08562198,  0.29270301,  0.20920125,  0.24323325,  1.        ,  0.36512128,  0.2323315 ,  0.28308282,  0.25161897,  0.24091518,  0.19474547,  0.26650565,  0.12040907,  0.1718552 ,  0.21426891,  0.22203486,  0.19696561,  0.31234891,  0.35379969,  0.19546578,  0.20297978,  0.05927272,  0.04357638,  0.29446217,  0.24039787,  0.15762377,  0.09957978,  0.12977972,  0.36067164,  0.05246647], 0.02459133)
#  ('sport', [ 0.15588309,  0.16858868,  0.141059  ,  0.28398298,  0.30557918,  0.20817021,  0.13814928,  0.31609576,  0.14673768,  0.30912588,  0.36512128,  1.        ,  0.38811667,  0.24580159,  0.25044266,  0.23513228,  0.14401209,  0.27530082,  0.12879688,  0.14660975,  0.18520739,  0.24414338,  0.17627573,  0.23788854,  0.361157  ,  0.14048691,  0.26636964,  0.15674984,  0.05817793,  0.13628251,  0.23573946,  0.22600194,  0.12607728,  0.16583996,  0.22597489,  0.07106901], 0.0231726 )
#  ('country', [ 0.1681181 ,  0.10723   ,  0.13639474,  0.23078125,  0.41106623,  0.33572717,  0.40717107,  0.31182924,  0.2737576 ,  0.26707402,  0.2323315 ,  0.38811667,  1.        ,  0.49366487,  0.56595548,  0.33450337,  0.33631821,  0.37893555,  0.27207468,  0.28297229,  0.21052207,  0.395634  ,  0.19539762,  0.17561623,  0.43512183,  0.15705167,  0.41070433,  0.21432426,  0.13491968,  0.13992623,  0.19820289,  0.29063797,  0.21894135,  0.26448087,  0.37750402,  0.12282904], 0.02621558)
#  ('city', [ 0.04818674,  0.09557677,  0.09852726,  0.22958866,  0.38502029,  0.48678546,  0.36808048,  0.29409515,  0.25734268,  0.22028889,  0.28308282,  0.24580159,  0.49366487,  1.        ,  0.49434279,  0.25790983,  0.48774046,  0.28496068,  0.32327106,  0.2716234 ,  0.10207648,  0.3232257 ,  0.12807804,  0.20161036,  0.46384957,  0.18423032,  0.32483181,  0.1632246 ,  0.14092301,  0.14051436,  0.14483868,  0.2222286 ,  0.15858047,  0.22549448,  0.29042706,  0.13643444], 0.02960399)
#  ('state', [ 0.13638333,  0.12480404,  0.14004866,  0.20582999,  0.32220126,  0.33242021,  0.36655784,  0.33127811,  0.23162039,  0.33618303,  0.25161897,  0.25044266,  0.56595548,  0.49434279,  1.        ,  0.33619728,  0.28013697,  0.3658543 ,  0.28640896,  0.25827086,  0.20269827,  0.29189893,  0.20082296,  0.12403748,  0.4257734 ,  0.3141922 ,  0.20228511,  0.23069502,  0.18674354,  0.14936192,  0.23954538,  0.26363457,  0.18555429,  0.28516834,  0.27375239,  0.15291659], 0.02408958)
#  ('language', [ 0.10777711,  0.08371766,  0.08445428,  0.13010724,  0.25553986,  0.2557834 ,  0.23083067,  0.15440181,  0.22867295,  0.26390004,  0.24091518,  0.23513228,  0.33450337,  0.25790983,  0.33619728,  1.        ,  0.20273094,  0.33956507,  0.11491724,  0.17644291,  0.1935235 ,  0.22920548,  0.2971898 ,  0.14436248,  0.39752169,  0.37850655,  0.15514056,  0.10304933,  0.09400923,  0.24114526,  0.365126  ,  0.18224913,  0.16320943,  0.28652475,  0.19545652,  0.12125996], 0.0239694 )
#  ('location', [ 0.09703732,  0.06075613,  0.08962467,  0.20104607,  0.36732264,  0.41195546,  0.29811142,  0.41436875,  0.37595453,  0.3008587 ,  0.19474547,  0.14401209,  0.33631821,  0.48774046,  0.28013697,  0.20273094,  1.        ,  0.32345348,  0.25107939,  0.27865068,  0.27068563,  0.3147677 ,  0.28508241,  0.14283056,  0.34852513,  0.36147588,  0.16033635,  0.15547382,  0.25828061,  0.28570044,  0.0941935 ,  0.10426643,  0.01101245,  0.01923559,  0.24943851,  0.28081141], 0.02872269)
#  ('person', [ 0.23194845,  0.14328078,  0.17800878,  0.27361346,  0.38661253,  0.29460031,  0.14118186,  0.36508948,  0.3454324 ,  0.36182281,  0.26650565,  0.27530082,  0.37893555,  0.28496068,  0.3658543 ,  0.33956507,  0.32345348,  1.        ,  0.18477366,  0.2372428 ,  0.28312965,  0.31786518,  0.23847954,  0.20599732,  0.43820956,  0.37921057,  0.1953503 ,  0.15781067,  0.16549286,  0.19634819,  0.37532635,  0.39523641,  0.26448806,  0.33277474,  0.35631142,  0.20463475], 0.02047931)
#  ('plant', [ 0.28273639,  0.26942568,  0.44998319,  0.36604851,  0.28156987,  0.38398566,  0.31722747,  0.16038936,  0.19434197,  0.28344159,  0.12040907,  0.12879688,  0.27207468,  0.32327106,  0.28640896,  0.11491724,  0.25107939,  0.18477366,  1.        ,  0.52701858,  0.32605928,  0.35709133,  0.19190595,  0.18575089,  0.31706913,  0.14174903,  0.18853887,  0.3542631 ,  0.18172062,  0.03014874,  0.07775198,  0.14182008,  0.06853005,  0.11409927,  0.20871508,  0.38226341], 0.02793346)
#  ('tree', [ 0.28667466,  0.23597087,  0.44323258,  0.32619582,  0.18859366,  0.37536068,  0.2080684 ,  0.20375278,  0.19525389,  0.23782609,  0.1718552 ,  0.14660975,  0.28297229,  0.2716234 ,  0.25827086,  0.17644291,  0.27865068,  0.2372428 ,  0.52701858,  1.        ,  0.20150858,  0.25870384,  0.26613539,  0.30073483,  0.34452422,  0.35423813,  0.27990599,  0.17487385,  0.15922899,  0.15268279,  0.12042247,  0.26197135,  0.14875913,  0.13683626,  0.23982682,  0.32250406], 0.02259074)
#  ('product', [ 0.08921853,  0.07699759,  0.24385653,  0.20308857,  0.47809132,  0.26985186,  0.31626053,  0.28106676,  0.28087096,  0.32320194,  0.21426891,  0.18520739,  0.21052207,  0.10207648,  0.20269827,  0.1935235 ,  0.27068563,  0.28312965,  0.32605928,  0.20150858,  1.        ,  0.37469352,  0.42491229,  0.3033737 ,  0.35736376,  0.27418843,  0.10927012,  0.29847494,  0.39752642,  0.31771584,  0.14645257,  0.16951749,  0.01847   ,  0.06354575,  0.24490074,  0.31913289], 0.02609761)
#  ('food', [ 0.2262792 ,  0.24007144,  0.33514594,  0.57734561,  0.34878849,  0.31562663,  0.23997914,  0.29927303,  0.18221698,  0.32612715,  0.22203486,  0.24414338,  0.395634  ,  0.3232257 ,  0.29189893,  0.22920548,  0.3147677 ,  0.31786518,  0.35709133,  0.25870384,  0.37469352,  1.        ,  0.18091162,  0.30269404,  0.42969867,  0.14739959,  0.21695886,  0.3086004 ,  0.25798482,  0.20294381,  0.1962627 ,  0.31436134,  0.17111269,  0.20881759,  0.3395825 ,  0.33411948], 0.02062766)
#  ('tool', [ 0.07099413,  0.03493869,  0.15691336,  0.13556556,  0.36505902,  0.29621256,  0.29884514,  0.19713803,  0.1639004 ,  0.32638737,  0.19696561,  0.17627573,  0.19539762,  0.12807804,  0.20082296,  0.2971898 ,  0.28508241,  0.23847954,  0.19190595,  0.26613539,  0.42491229,  0.18091162,  1.        ,  0.2812014 ,  0.37467043,  0.3953089 ,  0.17960822,  0.15447848,  0.36584618,  0.44171121,  0.18183562,  0.14502809,  0.03161265,  0.16066903,  0.13253026,  0.26707334], 0.02651876)
#  ('toy', [ 0.16915889,  0.26359565,  0.24275783,  0.268236  ,  0.20276631,  0.25634518,  0.0349083 ,  0.11983674,  0.14002047,  0.20575057,  0.31234891,  0.23788854,  0.17561623,  0.20161036,  0.12403748,  0.14436248,  0.14283056,  0.20599732,  0.18575089,  0.30073483,  0.3033737 ,  0.30269404,  0.2812014 ,  1.        ,  0.32324564,  0.29052653,  0.239163  ,  0.09322681,  0.23861346,  0.19661732,  0.18012425,  0.19011923,  0.1004796 ,  0.14061709,  0.33270142,  0.25149068], 0.02191847)
#  ('work of art', [ 0.16257724,  0.13847924,  0.2260719 ,  0.31462333,  0.47448032,  0.53175223,  0.31263976,  0.37357456,  0.2994704 ,  0.41097462,  0.35379969,  0.361157  ,  0.43512183,  0.46384957,  0.4257734 ,  0.39752169,  0.34852513,  0.43820956,  0.31706913,  0.34452422,  0.35736376,  0.42969867,  0.37467043,  0.32324564,  1.        ,  0.3320843 ,  0.38599321,  0.23716827,  0.18024582,  0.26170605,  0.3580521 ,  0.36705372,  0.28603126,  0.29592302,  0.36217259,  0.22698475], 0.0192131 )
#  ('object', [ 0.1537702 ,  0.09860177,  0.17046296,  0.15221294,  0.17038085,  0.28534258,  0.20249776,  0.30781708,  0.25674338,  0.31364407,  0.19546578,  0.14048691,  0.15705167,  0.18423032,  0.3141922 ,  0.37850655,  0.36147588,  0.37921057,  0.14174903,  0.35423813,  0.27418843,  0.14739959,  0.3953089 ,  0.29052653,  0.3320843 ,  1.        ,  0.09988501,  0.16251998,  0.22296619,  0.28880284,  0.29219393,  0.25032754,  0.15854654,  0.19600622,  0.18075464,  0.46511008], 0.02386179)
#  ('rock', [ 0.17579484,  0.21714398,  0.15263559,  0.27545964,  0.13452218,  0.25522969,  0.10454205,  0.17943103,  0.19715756,  0.14407145,  0.20297978,  0.26636964,  0.41070433,  0.32483181,  0.20228511,  0.15514056,  0.16033635,  0.1953503 ,  0.18853887,  0.27990599,  0.10927012,  0.21695886,  0.17960822,  0.239163  ,  0.38599321,  0.09988501,  1.        ,  0.2963549 ,  0.08242721,  0.09909738,  0.26664187,  0.17076691,  0.204902  ,  0.18951529,  0.3021264 ,  0.13888829], 0.02286986)
#  ('mineral', [ 0.22150958,  0.23228399,  0.26806161,  0.28463432,  0.17512631,  0.2159843 ,  0.20964966,  0.07575064,  0.15239831,  0.27133966,  0.05927272,  0.15674984,  0.21432426,  0.1632246 ,  0.23069502,  0.10304933,  0.15547382,  0.15781067,  0.3542631 ,  0.17487385,  0.29847494,  0.3086004 ,  0.15447848,  0.09322681,  0.23716827,  0.16251998,  0.2963549 ,  1.        ,  0.12810116,  0.01274782,  0.11361077,  0.12497018,  0.08975812,  0.08439619,  0.09464853,  0.22800253], 0.02434135)
#  ('appliance', [ 0.06981588,  0.08437644,  0.15496774,  0.10980863,  0.27856985,  0.25055966,  0.31384733,  0.14501677,  0.12654706,  0.16948397,  0.04357638,  0.05817793,  0.13491968,  0.14092301,  0.18674354,  0.09400923,  0.25828061,  0.16549286,  0.18172062,  0.15922899,  0.39752642,  0.25798482,  0.36584618,  0.23861346,  0.18024582,  0.22296619,  0.08242721,  0.12810116,  1.        ,  0.18231405,  0.03240874,  0.03809009, -0.02701486,  0.03019844,  0.09901942,  0.34647306], 0.02868974)
#  ('app', [ 0.00186202,  0.00756133,  0.02941374,  0.1461829 ,  0.22520417,  0.19060667,  0.2272651 ,  0.25470525,  0.2392845 ,  0.19930003,  0.29446217,  0.13628251,  0.13992623,  0.14051436,  0.14936192,  0.24114526,  0.28570044,  0.19634819,  0.03014874,  0.15268279,  0.31771584,  0.20294381,  0.44171121,  0.19661732,  0.26170605,  0.28880284,  0.09909738,  0.01274782,  0.18231405,  1.        ,  0.08897457,  0.12470119,  0.03241639,  0.05822662,  0.20822735,  0.18458626], 0.02810897)
#  ('emotion', [ 0.10381456,  0.06862945,  0.14003494,  0.14362782,  0.17903196,  0.17390889,  0.07145771,  0.18886132,  0.08022864,  0.27685699,  0.24039787,  0.23573946,  0.19820289,  0.14483868,  0.23954538,  0.365126  ,  0.0941935 ,  0.37532635,  0.07775198,  0.12042247,  0.14645257,  0.1962627 ,  0.18183562,  0.18012425,  0.3580521 ,  0.29219393,  0.26664187,  0.11361077,  0.03240874,  0.08897457,  1.        ,  0.57935495,  0.71700765,  0.67150612,  0.40625219,  0.11851121], 0.04178338)
#  ('happiness', [ 0.09603129,  0.05210143,  0.14137449,  0.21315416,  0.25908636,  0.21070393,  0.11713049,  0.16036117,  0.12660551,  0.2794628 ,  0.15762377,  0.22600194,  0.29063797,  0.2222286 ,  0.26363457,  0.18224913,  0.10426643,  0.39523641,  0.14182008,  0.26197135,  0.16951749,  0.31436134,  0.14502809,  0.19011923,  0.36705372,  0.25032754,  0.17076691,  0.12497018,  0.03809009,  0.12470119,  0.57935495,  1.        ,  0.6471877 ,  0.49907938,  0.40506351,  0.09383054], 0.0347378 )
#  ('sadness', [ 0.09557261,  0.04684052,  0.1202911 ,  0.12288729,  0.08050014,  0.09806334,  0.03803672,  0.14820167,  0.07240341,  0.16385546,  0.09957978,  0.12607728,  0.21894135,  0.15858047,  0.18555429,  0.16320943,  0.01101245,  0.26448806,  0.06853005,  0.14875913,  0.01847   ,  0.17111269,  0.03161265,  0.1004796 ,  0.28603126,  0.15854654,  0.204902  ,  0.08975812, -0.02701486,  0.03241639,  0.71700765,  0.6471877 ,  1.        ,  0.70558559,  0.42499553,  0.08815298], 0.04987216)
#  ('anger', [ 0.02206646,  0.07456657,  0.09538456,  0.12919459,  0.19170234,  0.18657569,  0.11069276,  0.12830996,  0.05818742,  0.27388357,  0.12977972,  0.16583996,  0.26448087,  0.22549448,  0.28516834,  0.28652475,  0.01923559,  0.33277474,  0.11409927,  0.13683626,  0.06354575,  0.20881759,  0.16066903,  0.14061709,  0.29592302,  0.19600622,  0.18951529,  0.08439619,  0.03019844,  0.05822662,  0.67150612,  0.49907938,  0.70558559,  1.        ,  0.38433641,  0.0540573 ], 0.04252921)
#  ('surprise', [ 0.08534717,  0.10579536,  0.17564371,  0.26711267,  0.26928744,  0.20576675,  0.11050762,  0.42769327,  0.33380753,  0.22596061,  0.36067164,  0.22597489,  0.37750402,  0.29042706,  0.27375239,  0.19545652,  0.24943851,  0.35631142,  0.20871508,  0.23982682,  0.24490074,  0.3395825 ,  0.13253026,  0.33270142,  0.36217259,  0.18075464,  0.3021264 ,  0.09464853,  0.09901942,  0.20822735,  0.40625219,  0.40506351,  0.42499553,  0.38433641,  1.        ,  0.11199093], 0.02526703)
#  ('container', [ 0.13992683,  0.12544516,  0.21091696,  0.28326025,  0.16830189,  0.26580438,  0.21145106,  0.15533681,  0.18923564,  0.16603795,  0.05246647,  0.07106901,  0.12282904,  0.13643444,  0.15291659,  0.12125996,  0.28081141,  0.20463475,  0.38226341,  0.32250406,  0.31913289,  0.33411948,  0.26707334,  0.25149068,  0.22698475,  0.46511008,  0.13888829,  0.22800253,  0.34647306,  0.18458626,  0.11851121,  0.09383054,  0.08815298,  0.0540573 ,  0.11199093,  1.        ], 0.02653213)]



by_variance = np.sort(matrix, order='variance')
cats_by_variance = by_variance['concept']
tokens_by_variance = [nlp(str(cat)) for cat in cats_by_variance]

vectors = []
for token in tokens_by_variance:
    vectors.append(generate_vector(token, tokens_by_variance))
matrix_by_variance = np.array(vectors, dtype=vector_dt)
# import pdb
# pdb.set_trace()

# print(matrix_by_variance)
# [('activity', [ 1.        ,  0.41097462,  0.36182281,  0.32612715,  0.20575057,  0.23782609,  0.14407145,  0.30912588,  0.31364407,  0.26390004,  0.33618303,  0.27133966,  0.24323325,  0.22596061,  0.23573386,  0.32320194,  0.26707402,  0.32638737,  0.16603795,  0.33481153,  0.37147682,  0.24806795,  0.28344159,  0.35287331,  0.19930003,  0.16948397,  0.3008587 ,  0.22028889,  0.32149247,  0.29123038,  0.2794628 ,  0.26502477,  0.11861232,  0.27685699,  0.27388357,  0.16385546], 0.01882023)
#  ('work of art', [ 0.41097462,  1.        ,  0.43820956,  0.42969867,  0.32324564,  0.34452422,  0.38599321,  0.361157  ,  0.3320843 ,  0.39752169,  0.4257734 ,  0.23716827,  0.35379969,  0.36217259,  0.2994704 ,  0.35736376,  0.43512183,  0.37467043,  0.22698475,  0.53175223,  0.37357456,  0.31462333,  0.31706913,  0.47448032,  0.26170605,  0.18024582,  0.34852513,  0.46384957,  0.2260719 ,  0.31263976,  0.36705372,  0.16257724,  0.13847924,  0.3580521 ,  0.29592302,  0.28603126], 0.0192131 )
#  ('person', [ 0.36182281,  0.43820956,  1.        ,  0.31786518,  0.20599732,  0.2372428 ,  0.1953503 ,  0.27530082,  0.37921057,  0.33956507,  0.3658543 ,  0.15781067,  0.26650565,  0.35631142,  0.3454324 ,  0.28312965,  0.37893555,  0.23847954,  0.20463475,  0.29460031,  0.36508948,  0.27361346,  0.18477366,  0.38661253,  0.19634819,  0.16549286,  0.32345348,  0.28496068,  0.17800878,  0.14118186,  0.39523641,  0.23194845,  0.14328078,  0.37532635,  0.33277474,  0.26448806], 0.02047931)
#  ('food', [ 0.32612715,  0.42969867,  0.31786518,  1.        ,  0.30269404,  0.25870384,  0.21695886,  0.24414338,  0.14739959,  0.22920548,  0.29189893,  0.3086004 ,  0.22203486,  0.3395825 ,  0.18221698,  0.37469352,  0.395634  ,  0.18091162,  0.33411948,  0.31562663,  0.29927303,  0.57734561,  0.35709133,  0.34878849,  0.20294381,  0.25798482,  0.3147677 ,  0.3232257 ,  0.33514594,  0.23997914,  0.31436134,  0.2262792 ,  0.24007144,  0.1962627 ,  0.20881759,  0.17111269], 0.02062766)
#  ('toy', [ 0.20575057,  0.32324564,  0.20599732,  0.30269404,  1.        ,  0.30073483,  0.239163  ,  0.23788854,  0.29052653,  0.14436248,  0.12403748,  0.09322681,  0.31234891,  0.33270142,  0.14002047,  0.3033737 ,  0.17561623,  0.2812014 ,  0.25149068,  0.25634518,  0.11983674,  0.268236  ,  0.18575089,  0.20276631,  0.19661732,  0.23861346,  0.14283056,  0.20161036,  0.24275783,  0.0349083 ,  0.19011923,  0.16915889,  0.26359565,  0.18012425,  0.14061709,  0.1004796 ], 0.02191847)
#  ('tree', [ 0.23782609,  0.34452422,  0.2372428 ,  0.25870384,  0.30073483,  1.        ,  0.27990599,  0.14660975,  0.35423813,  0.17644291,  0.25827086,  0.17487385,  0.1718552 ,  0.23982682,  0.19525389,  0.20150858,  0.28297229,  0.26613539,  0.32250406,  0.37536068,  0.20375278,  0.32619582,  0.52701858,  0.18859366,  0.15268279,  0.15922899,  0.27865068,  0.2716234 ,  0.44323258,  0.2080684 ,  0.26197135,  0.28667466,  0.23597087,  0.12042247,  0.13683626,  0.14875913], 0.02259074)
#  ('rock', [ 0.14407145,  0.38599321,  0.1953503 ,  0.21695886,  0.239163  ,  0.27990599,  1.        ,  0.26636964,  0.09988501,  0.15514056,  0.20228511,  0.2963549 ,  0.20297978,  0.3021264 ,  0.19715756,  0.10927012,  0.41070433,  0.17960822,  0.13888829,  0.25522969,  0.17943103,  0.27545964,  0.18853887,  0.13452218,  0.09909738,  0.08242721,  0.16033635,  0.32483181,  0.15263559,  0.10454205,  0.17076691,  0.17579484,  0.21714398,  0.26664187,  0.18951529,  0.204902  ], 0.02286986)
#  ('sport', [ 0.30912588,  0.361157  ,  0.27530082,  0.24414338,  0.23788854,  0.14660975,  0.26636964,  1.        ,  0.14048691,  0.23513228,  0.25044266,  0.15674984,  0.36512128,  0.22597489,  0.14673768,  0.18520739,  0.38811667,  0.17627573,  0.07106901,  0.20817021,  0.31609576,  0.28398298,  0.12879688,  0.30557918,  0.13628251,  0.05817793,  0.14401209,  0.24580159,  0.141059  ,  0.13814928,  0.22600194,  0.15588309,  0.16858868,  0.23573946,  0.16583996,  0.12607728], 0.0231726 )
#  ('object', [ 0.31364407,  0.3320843 ,  0.37921057,  0.14739959,  0.29052653,  0.35423813,  0.09988501,  0.14048691,  1.        ,  0.37850655,  0.3141922 ,  0.16251998,  0.19546578,  0.18075464,  0.25674338,  0.27418843,  0.15705167,  0.3953089 ,  0.46511008,  0.28534258,  0.30781708,  0.15221294,  0.14174903,  0.17038085,  0.28880284,  0.22296619,  0.36147588,  0.18423032,  0.17046296,  0.20249776,  0.25032754,  0.1537702 ,  0.09860177,  0.29219393,  0.19600622,  0.15854654], 0.02386179)
#  ('language', [ 0.26390004,  0.39752169,  0.33956507,  0.22920548,  0.14436248,  0.17644291,  0.15514056,  0.23513228,  0.37850655,  1.        ,  0.33619728,  0.10304933,  0.24091518,  0.19545652,  0.22867295,  0.1935235 ,  0.33450337,  0.2971898 ,  0.12125996,  0.2557834 ,  0.15440181,  0.13010724,  0.11491724,  0.25553986,  0.24114526,  0.09400923,  0.20273094,  0.25790983,  0.08445428,  0.23083067,  0.18224913,  0.10777711,  0.08371766,  0.365126  ,  0.28652475,  0.16320943], 0.0239694 )
#  ('state', [ 0.33618303,  0.4257734 ,  0.3658543 ,  0.29189893,  0.12403748,  0.25827086,  0.20228511,  0.25044266,  0.3141922 ,  0.33619728,  1.        ,  0.23069502,  0.25161897,  0.27375239,  0.23162039,  0.20269827,  0.56595548,  0.20082296,  0.15291659,  0.33242021,  0.33127811,  0.20582999,  0.28640896,  0.32220126,  0.14936192,  0.18674354,  0.28013697,  0.49434279,  0.14004866,  0.36655784,  0.26363457,  0.13638333,  0.12480404,  0.23954538,  0.28516834,  0.18555429], 0.02408958)
#  ('mineral', [ 0.27133966,  0.23716827,  0.15781067,  0.3086004 ,  0.09322681,  0.17487385,  0.2963549 ,  0.15674984,  0.16251998,  0.10304933,  0.23069502,  1.        ,  0.05927272,  0.09464853,  0.15239831,  0.29847494,  0.21432426,  0.15447848,  0.22800253,  0.2159843 ,  0.07575064,  0.28463432,  0.3542631 ,  0.17512631,  0.01274782,  0.12810116,  0.15547382,  0.1632246 ,  0.26806161,  0.20964966,  0.12497018,  0.22150958,  0.23228399,  0.11361077,  0.08439619,  0.08975812], 0.02434135)
#  ('game', [ 0.24323325,  0.35379969,  0.26650565,  0.22203486,  0.31234891,  0.1718552 ,  0.20297978,  0.36512128,  0.19546578,  0.24091518,  0.25161897,  0.05927272,  1.        ,  0.36067164,  0.20920125,  0.21426891,  0.2323315 ,  0.19696561,  0.05246647,  0.23051642,  0.29270301,  0.24568793,  0.12040907,  0.23639102,  0.29446217,  0.04357638,  0.19474547,  0.28308282,  0.10807427,  0.08562198,  0.15762377,  0.09492803,  0.08705616,  0.24039787,  0.12977972,  0.09957978], 0.02459133)
#  ('surprise', [ 0.22596061,  0.36217259,  0.35631142,  0.3395825 ,  0.33270142,  0.23982682,  0.3021264 ,  0.22597489,  0.18075464,  0.19545652,  0.27375239,  0.09464853,  0.36067164,  1.        ,  0.33380753,  0.24490074,  0.37750402,  0.13253026,  0.11199093,  0.20576675,  0.42769327,  0.26711267,  0.20871508,  0.26928744,  0.20822735,  0.09901942,  0.24943851,  0.29042706,  0.17564371,  0.11050762,  0.40506351,  0.08534717,  0.10579536,  0.40625219,  0.38433641,  0.42499553], 0.02526703)
#  ('date', [ 0.23573386,  0.2994704 ,  0.3454324 ,  0.18221698,  0.14002047,  0.19525389,  0.19715756,  0.14673768,  0.25674338,  0.22867295,  0.23162039,  0.15239831,  0.20920125,  0.33380753,  1.        ,  0.28087096,  0.2737576 ,  0.1639004 ,  0.18923564,  0.16392131,  0.40738869,  0.14845635,  0.19434197,  0.25604716,  0.2392845 ,  0.12654706,  0.37595453,  0.25734268,  0.04722958,  0.09450642,  0.12660551,  0.06579884,  0.0338531 ,  0.08022864,  0.05818742,  0.07240341], 0.02597185)
#  ('product', [ 0.32320194,  0.35736376,  0.28312965,  0.37469352,  0.3033737 ,  0.20150858,  0.10927012,  0.18520739,  0.27418843,  0.1935235 ,  0.20269827,  0.29847494,  0.21426891,  0.24490074,  0.28087096,  1.        ,  0.21052207,  0.42491229,  0.31913289,  0.26985186,  0.28106676,  0.20308857,  0.32605928,  0.47809132,  0.31771584,  0.39752642,  0.27068563,  0.10207648,  0.24385653,  0.31626053,  0.16951749,  0.08921853,  0.07699759,  0.14645257,  0.06354575,  0.01847   ], 0.02609761)
#  ('country', [ 0.26707402,  0.43512183,  0.37893555,  0.395634  ,  0.17561623,  0.28297229,  0.41070433,  0.38811667,  0.15705167,  0.33450337,  0.56595548,  0.21432426,  0.2323315 ,  0.37750402,  0.2737576 ,  0.21052207,  1.        ,  0.19539762,  0.12282904,  0.33572717,  0.31182924,  0.23078125,  0.27207468,  0.41106623,  0.13992623,  0.13491968,  0.33631821,  0.49366487,  0.13639474,  0.40717107,  0.29063797,  0.1681181 ,  0.10723   ,  0.19820289,  0.26448087,  0.21894135], 0.02621558)
#  ('tool', [ 0.32638737,  0.37467043,  0.23847954,  0.18091162,  0.2812014 ,  0.26613539,  0.17960822,  0.17627573,  0.3953089 ,  0.2971898 ,  0.20082296,  0.15447848,  0.19696561,  0.13253026,  0.1639004 ,  0.42491229,  0.19539762,  1.        ,  0.26707334,  0.29621256,  0.19713803,  0.13556556,  0.19190595,  0.36505902,  0.44171121,  0.36584618,  0.28508241,  0.12807804,  0.15691336,  0.29884514,  0.14502809,  0.07099413,  0.03493869,  0.18183562,  0.16066903,  0.03161265], 0.02651876)
#  ('container', [ 0.16603795,  0.22698475,  0.20463475,  0.33411948,  0.25149068,  0.32250406,  0.13888829,  0.07106901,  0.46511008,  0.12125996,  0.15291659,  0.22800253,  0.05246647,  0.11199093,  0.18923564,  0.31913289,  0.12282904,  0.26707334,  1.        ,  0.26580438,  0.15533681,  0.28326025,  0.38226341,  0.16830189,  0.18458626,  0.34647306,  0.28081141,  0.13643444,  0.21091696,  0.21145106,  0.09383054,  0.13992683,  0.12544516,  0.11851121,  0.0540573 ,  0.08815298], 0.02653213)
#  ('building', [ 0.33481153,  0.53175223,  0.29460031,  0.31562663,  0.25634518,  0.37536068,  0.25522969,  0.20817021,  0.28534258,  0.2557834 ,  0.33242021,  0.2159843 ,  0.23051642,  0.20576675,  0.16392131,  0.26985186,  0.33572717,  0.29621256,  0.26580438,  1.        ,  0.26281926,  0.19752407,  0.38398566,  0.47976098,  0.19060667,  0.25055966,  0.41195546,  0.48678546,  0.16350924,  0.52870823,  0.21070393,  0.06263642,  0.11335962,  0.17390889,  0.18657569,  0.09806334], 0.02669469)
#  ('event', [ 0.37147682,  0.37357456,  0.36508948,  0.29927303,  0.11983674,  0.20375278,  0.17943103,  0.31609576,  0.30781708,  0.15440181,  0.33127811,  0.07575064,  0.29270301,  0.42769327,  0.40738869,  0.28106676,  0.31182924,  0.19713803,  0.15533681,  0.26281926,  1.        ,  0.13068564,  0.16038936,  0.33998929,  0.25470525,  0.14501677,  0.41436875,  0.29409515,  0.05486135,  0.21335946,  0.16036117,  0.06351318,  0.0837541 ,  0.18886132,  0.12830996,  0.14820167], 0.02691206)
#  ('fish', [ 0.24806795,  0.31462333,  0.27361346,  0.57734561,  0.268236  ,  0.32619582,  0.27545964,  0.28398298,  0.15221294,  0.13010724,  0.20582999,  0.28463432,  0.24568793,  0.26711267,  0.14845635,  0.20308857,  0.23078125,  0.13556556,  0.28326025,  0.19752407,  0.13068564,  1.        ,  0.36604851,  0.17783834,  0.1461829 ,  0.10980863,  0.20104607,  0.22958866,  0.42725279,  0.05892237,  0.21315416,  0.41607596,  0.43459758,  0.14362782,  0.12919459,  0.12288729], 0.02708781)
#  ('plant', [ 0.28344159,  0.31706913,  0.18477366,  0.35709133,  0.18575089,  0.52701858,  0.18853887,  0.12879688,  0.14174903,  0.11491724,  0.28640896,  0.3542631 ,  0.12040907,  0.20871508,  0.19434197,  0.32605928,  0.27207468,  0.19190595,  0.38226341,  0.38398566,  0.16038936,  0.36604851,  1.        ,  0.28156987,  0.03014874,  0.18172062,  0.25107939,  0.32327106,  0.44998319,  0.31722747,  0.14182008,  0.28273639,  0.26942568,  0.07775198,  0.11409927,  0.06853005], 0.02793346)
#  ('business', [ 0.35287331,  0.47448032,  0.38661253,  0.34878849,  0.20276631,  0.18859366,  0.13452218,  0.30557918,  0.17038085,  0.25553986,  0.32220126,  0.17512631,  0.23639102,  0.26928744,  0.25604716,  0.47809132,  0.41106623,  0.36505902,  0.16830189,  0.47976098,  0.33998929,  0.17783834,  0.28156987,  1.        ,  0.22520417,  0.27856985,  0.36732264,  0.38502029,  0.10100605,  0.47240201,  0.25908636,  0.04581414,  0.07998402,  0.17903196,  0.19170234,  0.08050014], 0.02810804)
#  ('app', [ 0.19930003,  0.26170605,  0.19634819,  0.20294381,  0.19661732,  0.15268279,  0.09909738,  0.13628251,  0.28880284,  0.24114526,  0.14936192,  0.01274782,  0.29446217,  0.20822735,  0.2392845 ,  0.31771584,  0.13992623,  0.44171121,  0.18458626,  0.19060667,  0.25470525,  0.1461829 ,  0.03014874,  0.22520417,  1.        ,  0.18231405,  0.28570044,  0.14051436,  0.02941374,  0.2272651 ,  0.12470119,  0.00186202,  0.00756133,  0.08897457,  0.05822662,  0.03241639], 0.02810897)
#  ('appliance', [ 0.16948397,  0.18024582,  0.16549286,  0.25798482,  0.23861346,  0.15922899,  0.08242721,  0.05817793,  0.22296619,  0.09400923,  0.18674354,  0.12810116,  0.04357638,  0.09901942,  0.12654706,  0.39752642,  0.13491968,  0.36584618,  0.34647306,  0.25055966,  0.14501677,  0.10980863,  0.18172062,  0.27856985,  0.18231405,  1.        ,  0.25828061,  0.14092301,  0.15496774,  0.31384733,  0.03809009,  0.06981588,  0.08437644,  0.03240874,  0.03019844, -0.02701486], 0.02868974)
#  ('location', [ 0.3008587 ,  0.34852513,  0.32345348,  0.3147677 ,  0.14283056,  0.27865068,  0.16033635,  0.14401209,  0.36147588,  0.20273094,  0.28013697,  0.15547382,  0.19474547,  0.24943851,  0.37595453,  0.27068563,  0.33631821,  0.28508241,  0.28081141,  0.41195546,  0.41436875,  0.20104607,  0.25107939,  0.36732264,  0.28570044,  0.25828061,  1.        ,  0.48774046,  0.08962467,  0.29811142,  0.10426643,  0.09703732,  0.06075613,  0.0941935 ,  0.01923559,  0.01101245], 0.02872269)
#  ('city', [ 0.22028889,  0.46384957,  0.28496068,  0.3232257 ,  0.20161036,  0.2716234 ,  0.32483181,  0.24580159,  0.18423032,  0.25790983,  0.49434279,  0.1632246 ,  0.28308282,  0.29042706,  0.25734268,  0.10207648,  0.49366487,  0.12807804,  0.13643444,  0.48678546,  0.29409515,  0.22958866,  0.32327106,  0.38502029,  0.14051436,  0.14092301,  0.48774046,  1.        ,  0.09852726,  0.36808048,  0.2222286 ,  0.04818674,  0.09557677,  0.14483868,  0.22549448,  0.15858047], 0.02960399)
#  ('insect', [ 0.32149247,  0.2260719 ,  0.17800878,  0.33514594,  0.24275783,  0.44323258,  0.15263559,  0.141059  ,  0.17046296,  0.08445428,  0.14004866,  0.26806161,  0.10807427,  0.17564371,  0.04722958,  0.24385653,  0.13639474,  0.15691336,  0.21091696,  0.16350924,  0.05486135,  0.42725279,  0.44998319,  0.10100605,  0.02941374,  0.15496774,  0.08962467,  0.09852726,  1.        ,  0.08948028,  0.14137449,  0.49664178,  0.4715228 ,  0.14003494,  0.09538456,  0.1202911 ], 0.03300054)
#  ('infrastructure', [ 0.29123038,  0.31263976,  0.14118186,  0.23997914,  0.0349083 ,  0.2080684 ,  0.10454205,  0.13814928,  0.20249776,  0.23083067,  0.36655784,  0.20964966,  0.08562198,  0.11050762,  0.09450642,  0.31626053,  0.40717107,  0.29884514,  0.21145106,  0.52870823,  0.21335946,  0.05892237,  0.31722747,  0.47240201,  0.2272651 ,  0.31384733,  0.29811142,  0.36808048,  0.08948028,  1.        ,  0.11713049,  0.0739158 , -0.01620425,  0.07145771,  0.11069276,  0.03803672], 0.03336012)
#  ('happiness', [ 0.2794628 ,  0.36705372,  0.39523641,  0.31436134,  0.19011923,  0.26197135,  0.17076691,  0.22600194,  0.25032754,  0.18224913,  0.26363457,  0.12497018,  0.15762377,  0.40506351,  0.12660551,  0.16951749,  0.29063797,  0.14502809,  0.09383054,  0.21070393,  0.16036117,  0.21315416,  0.14182008,  0.25908636,  0.12470119,  0.03809009,  0.10426643,  0.2222286 ,  0.14137449,  0.11713049,  1.        ,  0.09603129,  0.05210143,  0.57935495,  0.49907938,  0.6471877 ], 0.0347378 )
#  ('mammal', [ 0.26502477,  0.16257724,  0.23194845,  0.2262792 ,  0.16915889,  0.28667466,  0.17579484,  0.15588309,  0.1537702 ,  0.10777711,  0.13638333,  0.22150958,  0.09492803,  0.08534717,  0.06579884,  0.08921853,  0.1681181 ,  0.07099413,  0.13992683,  0.06263642,  0.06351318,  0.41607596,  0.28273639,  0.04581414,  0.00186202,  0.06981588,  0.09703732,  0.04818674,  0.49664178,  0.0739158 ,  0.09603129,  1.        ,  0.60710036,  0.10381456,  0.02206646,  0.09557261], 0.03543878)
#  ('reptile', [ 0.11861232,  0.13847924,  0.14328078,  0.24007144,  0.26359565,  0.23597087,  0.21714398,  0.16858868,  0.09860177,  0.08371766,  0.12480404,  0.23228399,  0.08705616,  0.10579536,  0.0338531 ,  0.07699759,  0.10723   ,  0.03493869,  0.12544516,  0.11335962,  0.0837541 ,  0.43459758,  0.26942568,  0.07998402,  0.00756133,  0.08437644,  0.06075613,  0.09557677,  0.4715228 , -0.01620425,  0.05210143,  0.60710036,  1.        ,  0.06862945,  0.07456657,  0.04684052], 0.03636603)
#  ('emotion', [ 0.27685699,  0.3580521 ,  0.37532635,  0.1962627 ,  0.18012425,  0.12042247,  0.26664187,  0.23573946,  0.29219393,  0.365126  ,  0.23954538,  0.11361077,  0.24039787,  0.40625219,  0.08022864,  0.14645257,  0.19820289,  0.18183562,  0.11851121,  0.17390889,  0.18886132,  0.14362782,  0.07775198,  0.17903196,  0.08897457,  0.03240874,  0.0941935 ,  0.14483868,  0.14003494,  0.07145771,  0.57935495,  0.10381456,  0.06862945,  1.        ,  0.67150612,  0.71700765], 0.04178338)
#  ('anger', [ 0.27388357,  0.29592302,  0.33277474,  0.20881759,  0.14061709,  0.13683626,  0.18951529,  0.16583996,  0.19600622,  0.28652475,  0.28516834,  0.08439619,  0.12977972,  0.38433641,  0.05818742,  0.06354575,  0.26448087,  0.16066903,  0.0540573 ,  0.18657569,  0.12830996,  0.12919459,  0.11409927,  0.19170234,  0.05822662,  0.03019844,  0.01923559,  0.22549448,  0.09538456,  0.11069276,  0.49907938,  0.02206646,  0.07456657,  0.67150612,  1.        ,  0.70558559], 0.04252921)
#  ('sadness', [ 0.16385546,  0.28603126,  0.26448806,  0.17111269,  0.1004796 ,  0.14875913,  0.204902  ,  0.12607728,  0.15854654,  0.16320943,  0.18555429,  0.08975812,  0.09957978,  0.42499553,  0.07240341,  0.01847   ,  0.21894135,  0.03161265,  0.08815298,  0.09806334,  0.14820167,  0.12288729,  0.06853005,  0.08050014,  0.03241639, -0.02701486,  0.01101245,  0.15858047,  0.1202911 ,  0.03803672,  0.6471877 ,  0.09557261,  0.04684052,  0.71700765,  0.70558559,  1.        ], 0.04987216)]


#implementation of my projection/dimensional-compression algorithm

#Step (1.):
    # assign each concept-node an initial position (x,y) within the concentric circle defined by its variance in relation to the other concepts (lower variance closer to middle). Should speed up/ensure optimality of algorithm

# cats_by_variance = matrix_by_variance['concept']
# print(cats_by_variance)
# import pdb 
# pdb.set_trace()
concentric_radius = 10/len(category_tokens) 
curr_radius = concentric_radius
coordinates_store = {}
for i in range(len(category_tokens)):
    x_y = (rand.choice([rand.uniform(curr_radius, curr_radius-concentric_radius), rand.uniform(-curr_radius, -(curr_radius-concentric_radius))]), rand.choice([rand.uniform(curr_radius, curr_radius-concentric_radius), rand.uniform(-curr_radius, -(curr_radius-concentric_radius))]))
    curr_radius += concentric_radius
    # print(x_y)
    coordinates_store[cats_by_variance[i][0]] = x_y

# vectors_by_variance = matrix_by_variance['similarities']
# ordered_variances = matrix_by_variance['variance']


def distance_from_similarity(similarity, stretch_factor=100):
    distance = (1 - similarity)*stretch_factor
    return distance

def euclidean_distance(coordinate_1, coordinate_2):
    distance = math.sqrt(abs(coordinate_1[0]-coordinate_2[0])**2 + abs(coordinate_1[1]-coordinate_2[1])**2) 
    return distance

def compute_error(cat_name, coordinate, all_coordinates, stretch_factor=10):
    cat_vector = matrix[cat_name]
    error = 0
    for i in range(len(cat_vector)):
        curr_distance = euclidean_distance(coordinate, all_coordinates[i])
        error += abs(curr_distance - stretch_factor*(1-cat_vector[i]))


class TrilaterationException(Exception):
    pass

def simple_trilateration_algorithm(matrix_by_variance, dimension=100):

    def closest_plotted_concepts(vector, coordinates_data):
        num_plotted_concepts = len(coordinates_data)
        #constrained vector = list of tuples where first index is similarity of given concept to some plotted concept and the second index is the coordinate_data for that concept.. note that coordinates_data in order of variance
        constrained_vector = [(vector[i], coordinates_data[i]) for i in range(num_plotted_concepts)]
        #sort constrained vector by similarity
        sorted_c_vector = sorted(constrained_vector, key=lambda x: x[0], reverse=True)
        return sorted_c_vector
    
    #https://gis.stackexchange.com/questions/112905/map-location-of-unknown-point-with-distances-to-two-known-points
    #https://mathworld.wolfram.com/Circle-CircleIntersection.html
    def triangulate(coordinate_1, coordinate_2, distance_1, distance_2):
        base_distance = euclidean_distance(coordinate_1, coordinate_2)
        if base_distance > distance_1 + distance_2:
            raise TrilaterationException("No exact solutions because circles are separate")
            # return ()
        elif base_distance < abs(distance_1 - distance_2):
            raise TrilaterationException("No exact solutions because circles within each other")
            # return ()
        elif base_distance == 0:
            print("Unexpected issue... no distance between points")
            return ()
        else:
            a = (distance_1**2 - distance_2**2 + base_distance**2)/(2*base_distance)
            h = math.sqrt(distance_1**2 - a**2)
            mid_point = (coordinate_1[0] + (a/base_distance)*(coordinate_2[0]-coordinate_1[0]), coordinate_1[1] + (a/base_distance)*(coordinate_2[1]-coordinate_1[1]))
            #one solution case
            if base_distance == distance_1 + distance_2:
                print("Highly unlikely contingency!!")
                return ()
            new_solution_1 = (mid_point[0] + (h/base_distance)*(coordinate_2[1]-coordinate_1[1]), mid_point[1] + (h/base_distance)*(coordinate_2[0]-coordinate_1[0]))
            new_solution_2 = (mid_point[0] - (h/base_distance)*(coordinate_2[1]-coordinate_1[1]), mid_point[1] - (h/base_distance)*(coordinate_2[0]-coordinate_1[0]))
            return new_solution_1, new_solution_2

    #    
    def determine_optimal_solution(solution_1, solution_2, geometric_data):
        error_1 = error_2 = 0
        for entry in geometric_data:
            coordinate = entry[1][1]
            similarity = entry[0]
            ideal_distance = distance_from_similarity(similarity)
            measured_distance_1 = euclidean_distance(solution_1, coordinate)
            measured_distance_2 = euclidean_distance(solution_2, coordinate)
            error_1 += abs(measured_distance_1 - ideal_distance)
            error_2 += abs(measured_distance_2 - ideal_distance)
        if error_1 <= error_2:
            return solution_1
        return solution_2

    concepts_by_variance = matrix_by_variance['concept']
    vectors_by_variance = matrix_by_variance['similarities']
    ordered_variances = matrix_by_variance['variance']
    coordinates_data = []
    for idx, vector in enumerate(vectors_by_variance):
        if idx == 0:
            #placing the initial concept just to the left of the origin, and working out the right based on horizontal distance therefrom
            initial_position = -ordered_variances[0]*dimension
            coordinates_data.append((concepts_by_variance[0], (-ordered_variances[0]*dimension, 0)))
            distance = distance_from_similarity(vector[1])
            coordinates_data.append((concepts_by_variance[1], (initial_position+distance, 0)))
        elif idx == 1:
            continue
        else:
            ordered_geometric_data = closest_plotted_concepts(vector, coordinates_data)
            print(ordered_geometric_data)
            coordinate_1 = ordered_geometric_data[0][1][1]
            coordinate_2 = ordered_geometric_data[1][1][1]
            similarity_1 = ordered_geometric_data[0][0]
            similarity_2 = ordered_geometric_data[1][0]
            distance_1 = distance_from_similarity(similarity_1)
            distance_2 = distance_from_similarity(similarity_2)
            try:
                solutions = triangulate(coordinate_1, coordinate_2, distance_1, distance_2)
            except TrilaterationException as e:
                print(e)
                try:
                    coordinate_3 = ordered_geometric_data[2][1][1]
                    similarity_3 = ordered_geometric_data[2][0]
                    distance_3 = distance_from_similarity(similarity_3)
                    solutions = triangulate(coordinate_1, coordinate_3, distance_1, distance_3)
                except TrilaterationException as e:
                    print("Shit!")
                    import pdb
                    pdb.set_trace()
                
            solution_1 = solutions[0]
            solution_2 = solutions[1]
            final_solution = determine_optimal_solution(solution_1, solution_2, ordered_geometric_data)
            coordinates_data.append((cats_by_variance[idx], final_solution))
    return coordinates_data

# Need the interactive Tools for Matplotlib
import matplotlib.pyplot as plt
 
from sklearn.manifold import TSNE
coordinates_data = simple_trilateration_algorithm(matrix_by_variance)
def plot_map(coordinates_data):
    labels = [point[0] for point in coordinates_data]
    x_coords = np.array([point[1][0] for point in coordinates_data])
    y_coords = np.array([point[1][1] for point in coordinates_data])
    plt.scatter(x_coords, y_coords) 
    for label, x, y in zip(labels, x_coords, y_coords):
        plt.annotate(label, xy=(x, y), xytext=(x, y))
    plt.xlim(x_coords.min()-5, x_coords.max()+5)
    plt.ylim(y_coords.min()-5, y_coords.max()+5)
    plt.show()

plot_map(coordinates_data)


def display_closestwords_tsnescatterplot(matrix, word):
        
    # find tsne coords for 2 dimensions
    tsne = TSNE(n_components=2, random_state=0)
    np.set_printoptions(suppress=True)
    Y = tsne.fit_transform(arr)

    x_coords = Y[:, 0]
    y_coords = Y[:, 1]
    # display scatter plot
    plt.scatter(x_coords, y_coords)

    for label, x, y in zip(word_labels, x_coords, y_coords):
        plt.annotate(label, xy=(x, y), xytext=(0, 0), textcoords='offset points')
    plt.xlim(x_coords.min()+0.00005, x_coords.max()+0.00005)
    plt.ylim(y_coords.min()+0.00005, y_coords.max()+0.00005)
    plt.show()


#Step (2.)
    # Let s be 'stretching factor'... 10 is our test value
    # Then we define error(position(node)) = sum: [ dist(position(node), position(n_i)) - s*(1 - similarity(node, n_i)) ] for every n_i in node list
    # moving outward from lowest variance to highest in loop over nodes, adjust position of node in direction of highest delta until no more gains possible
    # repeat until collectively there is no more gain to be had 

#But what is movement algorithm exactly? 'precision' of directionality = variance of deltas within 90 degree arc (taking measurements at every numeric degree (rough)). Movement distance somehow inversely proportionate to precision. Intuition: nodes far away from current global minimum will point vaguely towards patch which minimises error - only when we get close to global minimum will it begin to point precisely because of stronger 'attraction' in vicinity.  


# def compute_error(cat_name, coordinate, all_coordinates, stretch_factor=10):
#     cat_vector = matrix[cat_name]
#     error = 0
#     for i in range(len(cat_vector)):
#         curr_distance = euclidean_distance(coordinate, all_coordinates[i])
#         error += abs(curr_distance - stretch_factor*(1-cat_vector[i]))

# def euclidean_distance(coordinate_1, coordinate_2):
#     distance = math.sqrt(abs(coordinate_1[0]-coordinate_2[0])**2 + abs(coordinate_1[1]-coordinate_2[1])**2) 
#     return distance


# termination_flag = 0
# for i in range(100):
#     for key,value in coordinates_store.items():
#         float("inf")



# import matplotlib.pyplot as plt
# plt.scatter(x, y)
# plt.show()